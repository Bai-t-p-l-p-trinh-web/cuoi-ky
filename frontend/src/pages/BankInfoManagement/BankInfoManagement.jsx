import React, { useState, useEffect } from "react";
import { toast } from "react-toastify";
import { userBankAPI } from "../../utils/axiosConfig";
import BankInfoForm from "../../components/user/BankInfoForm";
import "./BankInfoManagement.scss";

const BankInfoManagement = () => {
  const [bankInfo, setBankInfo] = useState(null);
  const [loading, setLoading] = useState(true);
  const [isEditing, setIsEditing] = useState(false);

  useEffect(() => {
    fetchBankInfo();
  }, []);
  const fetchBankInfo = async () => {
    try {
      setLoading(true);
      const response = await userBankAPI.get();
      setBankInfo(response.data);
    } catch (error) {
      console.error("Error fetching bank info:", error);
      // Bank info kh√¥ng t·ªìn t·∫°i l√† b√¨nh th∆∞·ªùng
      setBankInfo(null);
    } finally {
      setLoading(false);
    }
  };

  const handleSaveBankInfo = async (newBankInfo) => {
    try {
      await userBankAPI.update(newBankInfo);
      toast.success("ƒê√£ c·∫≠p nh·∫≠t th√¥ng tin ng√¢n h√†ng th√†nh c√¥ng");
      setIsEditing(false);
      fetchBankInfo();
    } catch (error) {
      toast.error("Kh√¥ng th·ªÉ c·∫≠p nh·∫≠t th√¥ng tin ng√¢n h√†ng");
      console.error("Error updating bank info:", error);
    }
  };

  const getVerificationStatusBadge = (status) => {
    const statusConfig = {
      pending: { label: "Ch·ªù x√°c minh", color: "warning" },
      verified: { label: "ƒê√£ x√°c minh", color: "success" },
      rejected: { label: "B·ªã t·ª´ ch·ªëi", color: "danger" },
    };

    const config = statusConfig[status] || {
      label: "Ch∆∞a x√°c minh",
      color: "secondary",
    };
    return (
      <span className={`badge badge-${config.color}`}>{config.label}</span>
    );
  };

  if (loading) {
    return (
      <div className="loading-container">
        <div className="spinner"></div>
        <p>ƒêang t·∫£i th√¥ng tin ng√¢n h√†ng...</p>
      </div>
    );
  }

  return (
    <div className="bank-info-management">
      <div className="container">
        <h1>Qu·∫£n l√Ω th√¥ng tin ng√¢n h√†ng</h1>

        <div className="info-section">
          <div className="section-header">
            <h2>Th√¥ng tin t√†i kho·∫£n ng√¢n h√†ng</h2>
            <p>
              Th√¥ng tin n√†y s·∫Ω ƒë∆∞·ª£c s·ª≠ d·ª•ng ƒë·ªÉ nh·∫≠n thanh to√°n khi b√°n xe v√†
              ho√†n ti·ªÅn khi c·∫ßn thi·∫øt.
            </p>
          </div>

          {!bankInfo && !isEditing ? (
            <div className="empty-state">
              <div className="empty-icon">üè¶</div>
              <h3>Ch∆∞a c√≥ th√¥ng tin ng√¢n h√†ng</h3>
              <p>
                B·∫°n c·∫ßn th√™m th√¥ng tin ng√¢n h√†ng ƒë·ªÉ c√≥ th·ªÉ b√°n xe v√† nh·∫≠n thanh
                to√°n.
              </p>
              <button
                onClick={() => setIsEditing(true)}
                className="btn btn-primary"
              >
                Th√™m th√¥ng tin ng√¢n h√†ng
              </button>
            </div>
          ) : isEditing ? (
            <div className="edit-form">
              <BankInfoForm
                initialData={bankInfo}
                onSave={handleSaveBankInfo}
                onCancel={() => setIsEditing(false)}
              />
            </div>
          ) : (
            <div className="bank-info-card">
              <div className="card-header">
                <h3>Th√¥ng tin ng√¢n h√†ng hi·ªán t·∫°i</h3>
                <div className="header-actions">
                  {getVerificationStatusBadge(bankInfo.verificationStatus)}
                  <button
                    onClick={() => setIsEditing(true)}
                    className="btn btn-outline"
                  >
                    Ch·ªânh s·ª≠a
                  </button>
                </div>
              </div>

              <div className="card-content">
                <div className="info-grid">
                  <div className="info-item">
                    <label>T√™n ng√¢n h√†ng:</label>
                    <span>{bankInfo.bankName}</span>
                  </div>

                  <div className="info-item">
                    <label>S·ªë t√†i kho·∫£n:</label>
                    <span>{bankInfo.accountNumber}</span>
                  </div>

                  <div className="info-item">
                    <label>T√™n ch·ªß t√†i kho·∫£n:</label>
                    <span>{bankInfo.accountHolderName}</span>
                  </div>

                  <div className="info-item">
                    <label>Chi nh√°nh:</label>
                    <span>{bankInfo.branch || "Kh√¥ng c√≥"}</span>
                  </div>
                </div>

                {bankInfo.verificationStatus === "rejected" &&
                  bankInfo.rejectionReason && (
                    <div className="rejection-reason">
                      <h4>L√Ω do t·ª´ ch·ªëi:</h4>
                      <p>{bankInfo.rejectionReason}</p>
                    </div>
                  )}
              </div>

              <div className="card-footer">
                <div className="update-info">
                  <small>
                    C·∫≠p nh·∫≠t l·∫ßn cu·ªëi:{" "}
                    {new Date(bankInfo.updatedAt).toLocaleString("vi-VN")}
                  </small>
                </div>
              </div>
            </div>
          )}
        </div>

        <div className="notice-section">
          <div className="notice-card">
            <h3>üìã L∆∞u √Ω quan tr·ªçng</h3>
            <ul>
              <li>Th√¥ng tin ng√¢n h√†ng ph·∫£i ch√≠nh x√°c v√† thu·ªôc v·ªÅ ch√≠nh b·∫°n</li>
              <li>Admin s·∫Ω x√°c minh th√¥ng tin tr∆∞·ªõc khi b·∫°n c√≥ th·ªÉ s·ª≠ d·ª•ng</li>
              <li>
                Th√¥ng tin n√†y s·∫Ω ƒë∆∞·ª£c b·∫£o m·∫≠t v√† ch·ªâ s·ª≠ d·ª•ng cho m·ª•c ƒë√≠ch thanh
                to√°n
              </li>
              <li>
                B·∫°n c√≥ th·ªÉ c·∫≠p nh·∫≠t th√¥ng tin b·∫•t c·ª© l√∫c n√†o nh∆∞ng c·∫ßn x√°c minh
                l·∫°i
              </li>
              <li>
                N·∫øu th√¥ng tin b·ªã t·ª´ ch·ªëi, vui l√≤ng ki·ªÉm tra v√† c·∫≠p nh·∫≠t l·∫°i
              </li>
            </ul>
          </div>
        </div>
      </div>
    </div>
  );
};

export default BankInfoManagement;
