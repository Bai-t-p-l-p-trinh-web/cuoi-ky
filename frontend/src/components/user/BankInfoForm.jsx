import React, { useState, useEffect } from "react";
import { userBankAPI } from "../../utils/axiosConfig";
import { toast } from "react-toastify";
import "./BankInfoForm.scss";

const BankInfoForm = ({ onSuccess, onClose }) => {
  const [formData, setFormData] = useState({
    bankName: "",
    bankCode: "",
    accountNumber: "",
    accountHolder: "",
  });
  const [loading, setLoading] = useState(false);
  const [currentBankInfo, setCurrentBankInfo] = useState(null);

  const bankOptions = [
    { code: "970422", name: "MB Bank" },
    { code: "970407", name: "Techcombank" },
    { code: "970415", name: "Vietinbank" },
    { code: "970436", name: "Vietcombank" },
    { code: "970405", name: "Agribank" },
    { code: "970418", name: "BIDV" },
    { code: "970432", name: "VPBank" },
    { code: "970403", name: "Sacombank" },
    { code: "970448", name: "OCB" },
    { code: "970441", name: "VIB" },
  ];

  useEffect(() => {
    fetchCurrentBankInfo();
  }, []);

  const fetchCurrentBankInfo = async () => {
    try {
      const response = await userBankAPI.get();
      if (response.data.bankInfo) {
        const bankInfo = response.data.bankInfo;
        setCurrentBankInfo(bankInfo);
        setFormData({
          bankName: bankInfo.bankName || "",
          bankCode: bankInfo.bankCode || "",
          accountNumber: bankInfo.accountNumber || "",
          accountHolder: bankInfo.accountHolder || "",
        });
      }
    } catch (error) {
      // Bank info not found - this is OK for first time setup
      console.log("No bank info found:", error);
    }
  };

  const handleSubmit = async (e) => {
    e.preventDefault();
    setLoading(true);

    try {
      const response = await userBankAPI.update(formData);

      toast.success("C·∫≠p nh·∫≠t th√¥ng tin ng√¢n h√†ng th√†nh c√¥ng!");
      if (onSuccess) {
        onSuccess(response.data.bankInfo);
      }
      if (onClose) {
        onClose();
      }
    } catch (error) {
      console.error("Error updating bank info:", error);
    }

    setLoading(false);
  };

  const handleBankChange = (bankCode) => {
    const selectedBank = bankOptions.find((bank) => bank.code === bankCode);
    setFormData({
      ...formData,
      bankCode,
      bankName: selectedBank ? selectedBank.name : "",
    });
  };

  const validateAccountNumber = (value) => {
    // Basic validation - adjust based on requirements
    return /^\d{6,20}$/.test(value);
  };

  const validateAccountHolder = (value) => {
    // Should be uppercase Vietnamese name
    return /^[A-Z\s]+$/.test(value) && value.length >= 2;
  };

  return (
    <div className="bank-info-form">
      <div className="form-header">
        <h3>
          {currentBankInfo
            ? "C·∫≠p nh·∫≠t th√¥ng tin ng√¢n h√†ng"
            : "Th√™m th√¥ng tin ng√¢n h√†ng"}
        </h3>
        {onClose && (
          <button className="close-btn" onClick={onClose}>
            √ó
          </button>
        )}
      </div>

      {currentBankInfo && (
        <div className="current-info">
          <h4>Th√¥ng tin hi·ªán t·∫°i:</h4>
          <div className="info-display">
            <div className="info-row">
              <span>Ng√¢n h√†ng:</span>
              <span>{currentBankInfo.bankName}</span>
            </div>
            <div className="info-row">
              <span>S·ªë t√†i kho·∫£n:</span>
              <span>{currentBankInfo.accountNumber}</span>
            </div>
            <div className="info-row">
              <span>Ch·ªß t√†i kho·∫£n:</span>
              <span>{currentBankInfo.accountHolder}</span>
            </div>
            <div className="info-row">
              <span>Tr·∫°ng th√°i:</span>
              <span
                className={`status ${
                  currentBankInfo.isVerified ? "verified" : "pending"
                }`}
              >
                {currentBankInfo.isVerified
                  ? "‚úÖ ƒê√£ x√°c minh"
                  : "‚è≥ Ch·ªù x√°c minh"}
              </span>
            </div>
            {currentBankInfo.verifiedAt && (
              <div className="info-row">
                <span>X√°c minh l√∫c:</span>
                <span>
                  {new Date(currentBankInfo.verifiedAt).toLocaleString("vi-VN")}
                </span>
              </div>
            )}
          </div>
        </div>
      )}

      <form onSubmit={handleSubmit}>
        <div className="form-group">
          <label>Ng√¢n h√†ng *</label>
          <select
            value={formData.bankCode}
            onChange={(e) => handleBankChange(e.target.value)}
            required
          >
            <option value="">-- Ch·ªçn ng√¢n h√†ng --</option>
            {bankOptions.map((bank) => (
              <option key={bank.code} value={bank.code}>
                {bank.name}
              </option>
            ))}
          </select>
        </div>

        <div className="form-group">
          <label>S·ªë t√†i kho·∫£n *</label>
          <input
            type="text"
            value={formData.accountNumber}
            onChange={(e) =>
              setFormData({
                ...formData,
                accountNumber: e.target.value.replace(/\D/g, ""),
              })
            }
            placeholder="Nh·∫≠p s·ªë t√†i kho·∫£n (6-20 s·ªë)"
            maxLength="20"
            required
          />
          {formData.accountNumber &&
            !validateAccountNumber(formData.accountNumber) && (
              <small className="error">S·ªë t√†i kho·∫£n ph·∫£i t·ª´ 6-20 ch·ªØ s·ªë</small>
            )}
        </div>

        <div className="form-group">
          <label>Ch·ªß t√†i kho·∫£n *</label>
          <input
            type="text"
            value={formData.accountHolder}
            onChange={(e) =>
              setFormData({
                ...formData,
                accountHolder: e.target.value.toUpperCase(),
              })
            }
            placeholder="NGUYEN VAN A (vi·∫øt hoa, ƒë√∫ng nh∆∞ tr√™n th·∫ª)"
            required
          />
          {formData.accountHolder &&
            !validateAccountHolder(formData.accountHolder) && (
              <small className="error">
                T√™n ch·ªß TK ph·∫£i vi·∫øt hoa, ch·ªâ g·ªìm ch·ªØ c√°i v√† kho·∫£ng tr·∫Øng
              </small>
            )}
        </div>

        <div className="info-note">
          <h4>üìù L∆∞u √Ω quan tr·ªçng:</h4>
          <ul>
            <li>Th√¥ng tin ng√¢n h√†ng ph·∫£i ch√≠nh x√°c 100%</li>
            <li>
              T√™n ch·ªß t√†i kho·∫£n ph·∫£i vi·∫øt HOA v√† ƒë√∫ng nh∆∞ tr√™n th·∫ª ng√¢n h√†ng
            </li>
            <li>Admin s·∫Ω x√°c minh th√¥ng tin trong v√≤ng 24h</li>
            <li>Th√¥ng tin ƒë√£ x√°c minh m·ªõi ƒë∆∞·ª£c s·ª≠ d·ª•ng cho giao d·ªãch</li>
            <li>Ch·ªâ t√†i kho·∫£n c·ªßa ch√≠nh b·∫°n m·ªõi ƒë∆∞·ª£c ch·∫•p nh·∫≠n</li>
          </ul>
        </div>

        <div className="form-actions">
          {onClose && (
            <button type="button" onClick={onClose} disabled={loading}>
              H·ªßy
            </button>
          )}
          <button
            type="submit"
            disabled={
              loading ||
              !validateAccountNumber(formData.accountNumber) ||
              !validateAccountHolder(formData.accountHolder)
            }
          >
            {loading ? "ƒêang c·∫≠p nh·∫≠t..." : "C·∫≠p nh·∫≠t th√¥ng tin"}
          </button>
        </div>
      </form>

      {currentBankInfo && !currentBankInfo.isVerified && (
        <div className="verification-notice">
          <h4>üîç Qu√° tr√¨nh x√°c minh</h4>
          <p>Th√¥ng tin ng√¢n h√†ng c·ªßa b·∫°n ƒëang ch·ªù admin x√°c minh.</p>
          <p>Qu√° tr√¨nh n√†y th∆∞·ªùng m·∫•t 24-48 gi·ªù l√†m vi·ªác.</p>
          <p>B·∫°n s·∫Ω nh·∫≠n ƒë∆∞·ª£c th√¥ng b√°o khi x√°c minh ho√†n t·∫•t.</p>
        </div>
      )}
    </div>
  );
};

export default BankInfoForm;
