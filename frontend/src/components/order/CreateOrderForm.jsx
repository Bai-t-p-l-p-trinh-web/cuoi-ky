import React, { useState } from "react";
import { orderAPI } from "../../utils/axiosConfig";
import { toast } from "react-toastify";
import QRCodeModal from "./QRCodeModal";
import { createQRData } from "../../utils/vietqr";
import "./CreateOrderForm.scss";

const CreateOrderForm = ({ car, onOrderCreated, onClose }) => {
  const [formData, setFormData] = useState({
    paymentMethod: "deposit",
    depositPercentage: 20,
  });
  const [loading, setLoading] = useState(false);
  const [showQRModal, setShowQRModal] = useState(false);
  const [orderData, setOrderData] = useState(null);
  const handleSubmit = async (e) => {
    e.preventDefault();
    setLoading(true);

    try {
      console.log("=== FRONTEND G·ªåI API ===");
      console.log("Data g·ª≠i ƒëi:", {
        carId: car._id,
        paymentMethod: formData.paymentMethod,
        depositPercentage: formData.depositPercentage,
      });

      // T√≠nh to√°n s·ªë ti·ªÅn thanh to√°n
      const paymentAmount =
        formData.paymentMethod === "deposit"
          ? car.price * (parseInt(formData.depositPercentage) / 100)
          : car.price;

      // T·∫°o orderCode unique
      const orderCode = `ORD${Date.now()}`;
      const paymentCode = `PAY${Date.now()}`;

      // T·∫°o orderData ngay l·∫≠p t·ª©c ƒë·ªÉ render QR
      const immediateOrderData = {
        order: {
          _id: `temp_${Date.now()}`,
          orderCode: orderCode,
          totalAmount: car.price,
          depositAmount:
            formData.paymentMethod === "deposit" ? paymentAmount : 0,
          remainingAmount:
            formData.paymentMethod === "deposit"
              ? car.price - paymentAmount
              : 0,
          paymentMethod: formData.paymentMethod,
          car: car,
          status: "awaiting_payment",
        },
        payment: {
          _id: `temp_pay_${Date.now()}`,
          paymentCode: paymentCode,
          amount: paymentAmount,
          type:
            formData.paymentMethod === "deposit" ? "deposit" : "full_payment",
          status: "pending",
        },
        qrCode: createQRData(
          paymentAmount,
          orderCode,
          formData.paymentMethod === "deposit" ? "deposit" : "full_payment"
        ),
        nextStep: "payment",
      };

      // Hi·ªÉn th·ªã UI ngay l·∫≠p t·ª©c
      if (formData.paymentMethod !== "direct_transaction") {
        toast.success("ƒê∆°n h√†ng ƒë√£ ƒë∆∞·ª£c t·∫°o! Vui l√≤ng thanh to√°n.");
        setOrderData(immediateOrderData);
        setShowQRModal(true);
      } else {
        toast.success("ƒê∆°n h√†ng ƒë√£ ƒë∆∞·ª£c t·∫°o! Vui l√≤ng li√™n h·ªá ng∆∞·ªùi b√°n.");
        onOrderCreated(immediateOrderData);
      }

      // G·ªçi API t·∫°o order th·∫≠t ·ªü background (kh√¥ng await)
      orderAPI
        .create({
          carId: car._id,
          paymentMethod: formData.paymentMethod,
          depositPercentage: parseInt(formData.depositPercentage),
        })
        .then((response) => {
          console.log("‚úÖ Background API th√†nh c√¥ng:", response);
          // C·∫≠p nh·∫≠t v·ªõi data th·∫≠t n·∫øu c·∫ßn
          if (response?.data && showQRModal) {
            setOrderData((prevData) => ({
              ...prevData,
              order: { ...prevData.order, ...response.data.order },
              payment: { ...prevData.payment, ...response.data.payment },
              // Gi·ªØ QR code c≈© ho·∫∑c update n·∫øu backend tr·∫£ v·ªÅ QR m·ªõi
              qrCode: response.data.qrCode || prevData.qrCode,
            }));
          }
        })
        .catch((error) => {
          console.error("‚ùå Background API l·ªói:", error);
          // Kh√¥ng l√†m g√¨, user v·∫´n c√≥ th·ªÉ d√πng v·ªõi data ƒë√£ t·∫°o
        });
    } catch (error) {
      console.error("Error creating order:", error);

      // Ki·ªÉm tra l·ªói seller ch∆∞a c√≥ th√¥ng tin ng√¢n h√†ng
      if (error.response?.data?.sellerBankNotConfigured) {
        toast.error(
          "Ng∆∞·ªùi b√°n ch∆∞a c·∫≠p nh·∫≠t th√¥ng tin ng√¢n h√†ng. Vui l√≤ng ch·ªçn ph∆∞∆°ng th·ª©c 'Giao d·ªãch tr·ª±c ti·∫øp' ho·∫∑c li√™n h·ªá ng∆∞·ªùi b√°n.",
          { autoClose: 5000 }
        );
        // T·ª± ƒë·ªông chuy·ªÉn sang giao d·ªãch tr·ª±c ti·∫øp
        setFormData({ ...formData, paymentMethod: "direct_transaction" });
      } else {
        toast.error(error.response?.data?.message || "Kh√¥ng th·ªÉ t·∫°o ƒë∆°n h√†ng");
      }
    }

    setLoading(false);
  };

  const handleQRSuccess = () => {
    setShowQRModal(false);
    onOrderCreated(orderData);
  };

  const formatPrice = (price) => {
    return new Intl.NumberFormat("vi-VN", {
      style: "currency",
      currency: "VND",
    }).format(price);
  };

  const calculateAmount = () => {
    if (formData.paymentMethod === "deposit") {
      return car.price * (formData.depositPercentage / 100);
    } else if (formData.paymentMethod === "full_payment") {
      return car.price;
    }
    return 0;
  };
  console.log("Car data:", car);
  console.log("Car ID:", car?._id);
  console.log("Form data being sent:", {
    carId: car?._id,
    paymentMethod: formData.paymentMethod,
    depositPercentage: formData.depositPercentage,
  });
  return (
    <>
      <div className="create-order-form">
        <div className="form-header">
          <h3>T·∫°o ƒë∆°n h√†ng</h3>
          <button className="close-btn" onClick={onClose}>
            √ó
          </button>
        </div>

        <div className="car-info">
          <img src={car.img_src[0]} alt={car.title} />
          <div className="car-details">
            <h4>{car.title}</h4>
            <p className="price">{formatPrice(car.price)}</p>
            <p className="location">{car.location?.query_name}</p>
          </div>
        </div>

        <form onSubmit={handleSubmit}>
          <div className="form-group">
            <label>Ph∆∞∆°ng th·ª©c thanh to√°n:</label>
            <select
              value={formData.paymentMethod}
              onChange={(e) =>
                setFormData({ ...formData, paymentMethod: e.target.value })
              }
              required
            >
              <option value="deposit">ƒê·∫∑t c·ªçc tr∆∞·ªõc</option>
              <option value="full_payment">Thanh to√°n to√†n b·ªô</option>
              <option value="direct_transaction">Giao d·ªãch tr·ª±c ti·∫øp</option>
            </select>
          </div>

          {formData.paymentMethod === "deposit" && (
            <div className="form-group">
              <label>T·ª∑ l·ªá ƒë·∫∑t c·ªçc (%):</label>
              <input
                type="range"
                min="10"
                max="50"
                step="5"
                value={formData.depositPercentage}
                onChange={(e) =>
                  setFormData({
                    ...formData,
                    depositPercentage: e.target.value,
                  })
                }
              />
              <div className="percentage-display">
                {formData.depositPercentage}% = {formatPrice(calculateAmount())}
              </div>
            </div>
          )}

          {formData.paymentMethod !== "direct_transaction" && (
            <div className="payment-info">
              <h4>Th√¥ng tin thanh to√°n:</h4>
              <div className="payment-details">
                <div className="detail-row">
                  <span>T·ªïng gi√° xe:</span>
                  <span>{formatPrice(car.price)}</span>
                </div>
                <div className="detail-row">
                  <span>S·ªë ti·ªÅn c·∫ßn thanh to√°n:</span>
                  <span className="highlight">
                    {formatPrice(calculateAmount())}
                  </span>
                </div>
                {formData.paymentMethod === "deposit" && (
                  <div className="detail-row">
                    <span>C√≤n l·∫°i:</span>
                    <span>{formatPrice(car.price - calculateAmount())}</span>
                  </div>
                )}
              </div>
            </div>
          )}

          {formData.paymentMethod === "direct_transaction" && (
            <div className="direct-transaction-note">
              <p>ü§ù B·∫°n s·∫Ω giao d·ªãch tr·ª±c ti·∫øp v·ªõi ng∆∞·ªùi b√°n</p>
              <p>üí∞ Thanh to√°n khi nh·∫≠n xe</p>
              <p>
                üìû Vui l√≤ng li√™n h·ªá ng∆∞·ªùi b√°n ƒë·ªÉ th·ªëng nh·∫•t ƒë·ªãa ƒëi·ªÉm giao d·ªãch
              </p>
            </div>
          )}

          <div className="form-actions">
            <button type="button" onClick={onClose} disabled={loading}>
              H·ªßy
            </button>
            <button type="submit" disabled={loading}>
              {loading ? "ƒêang t·∫°o..." : "T·∫°o ƒë∆°n h√†ng"}
            </button>
          </div>
        </form>
      </div>

      {showQRModal && orderData && (
        <QRCodeModal
          orderData={orderData}
          onSuccess={handleQRSuccess}
          onClose={() => setShowQRModal(false)}
        />
      )}
    </>
  );
};

export default CreateOrderForm;
